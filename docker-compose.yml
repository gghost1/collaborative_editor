version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "29092:29092"
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:29092"]
      interval: 5s
      timeout: 10s
      retries: 10

  redpanda-console:
    image: docker.redpanda.com/redpandadata/console:latest
    container_name: redpanda-console
    ports:
      - "8083:8083"
    depends_on:
      - kafka
    environment:
      - KAFKA_BROKERS=kafka:29092
    networks:
      - app-network

  # redis:
  #   image: redis:7
  #   command: [ "redis-server", "--requirepass", "5432" ]
  #   ports:
  #     - "6379:6379"
  #   networks:
  #     - app-network
  #   healthcheck:
  #     test: [ "CMD", "redis-cli", "-a", "5432", "ping" ]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  db:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres # test data
      POSTGRES_PASSWORD: 4000
      POSTGRES_DB: postgresql
    volumes:
      - app_data:/var/lib/postgresql/data
    ports:
      - "4000:4000"
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: ./backend
    ports:
      - "8080:8080"
    restart: always
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - SPRING_KAFKA_GROUP_ID=backend-group
      - SPRING_KAFKA_PROPERTIES_SECURITY_PROTOCOL=PLAINTEXT
    depends_on:
      - image_processing
      - kafka
      - db
    networks:
      - app-network

  frontend:
    build: ./frontend
    ports:
      - "80:80"
    restart: always
    depends_on:
      - backend
    networks:
      - app-network

  image_processing:
    build: ./image_processing_service
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - POSTGRES_HOST=db
      - POSTGRES_DB=postgresql
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=4000
    depends_on:
      - kafka
      - db
    networks:
      - app-network
networks:
  app-network:
    driver: bridge

volumes:
  app_data:
  kafka_data: